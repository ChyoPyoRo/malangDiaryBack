generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  PK_user      Int            @id @unique @default(autoincrement())
  loginId      String         @unique @db.VarChar(40)
  email        String         @db.VarChar(40)
  name         String         @db.VarChar(20)
  gender       String         @db.VarChar(20)
  password     String         @db.VarChar(60)
  description  String?        @db.VarChar(100)
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  withdrawal   Int            @default(0) @db.TinyInt
  emotion      String?        @db.VarChar(20)
  diary        Diary[]
  diaryAnswer  DiaryAnswer[]
  emotionData  EmotionData[]
  friend       friend[]
  message      message[]
  refreshToken refreshToken[]
}

model emailAuthentication {
  id          Int    @id @unique @default(autoincrement())
  email       String @db.VarChar(40)
  CertiNumber Int
}

model Diary {
  PK_diary     Int           @id @unique @default(autoincrement())
  img          String?       @db.VarChar(200)
  content      String        @db.VarChar(1000)
  scope        String        @db.VarChar(10)
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  title        String        @db.VarChar(40)
  subTitle     String?       @db.VarChar(40)
  writer_id    String        @map("FK_userId")
  imgName      String?
  emotion      String        @db.VarChar(10)
  user         user          @relation(fields: [writer_id], references: [loginId])
  diaryEmotion diaryEmotion?

  @@index([writer_id], map: "diary_userId_fkey")
}

model diaryEmotion {
  Excited    Float @default(0)
  Comfort    Float @default(0)
  Confidence Float @default(0)
  thanks     Float @default(0)
  Sadness    Float @default(0)
  Anger      Float @default(0)
  Anxiety    Float @default(0)
  hurt       Float @default(0)
  diaryId    Int   @unique @map("FK_diaryId")
  diary      Diary @relation(fields: [diaryId], references: [PK_diary])
}

model message {
  id       String   @id @unique @default(uuid())
  userId   String //loginId
  text     String   @db.VarChar(200)
  createAt DateTime @default(now())
  room     String
  chatRoom chatRoom @relation(fields: [room], references: [id])
  user     user     @relation(fields: [userId], references: [loginId])

  @@index([userId], map: "message_userId_fkey")
  @@index([room], map: "message_room_fkey")
}

model chatRoom {
  id        String    @id @unique @default(uuid())
  userIdFst String //loginId
  userIdSnd String //loginId + 둘의 차이는 모시깽이
  latest    DateTime
  message   message[]
}

model standByFriend {
  PK_standByFriend Int      @id @unique @default(autoincrement())
  requesterId      String //loginId
  respondentId     String //loginId
  relationship     Int      @default(0) @db.TinyInt
  createAt         DateTime @default(now())
}

model friend {
  id       Int    @id @unique @default(autoincrement())
  friendId String // loginId
  userId   String // loginId
  user     user   @relation(fields: [friendId], references: [loginId])

  @@index([friendId], map: "friend_friendId_fkey")
}

model refreshToken {
  id           String @id @unique @default(uuid())
  refreshToken String @db.VarChar(500)
  userId       String
  user         user   @relation(fields: [userId], references: [loginId])

  @@index([userId], map: "refreshToken_userId_fkey")
}

model EmotionData {
  emotion        String   @db.VarChar(20)
  createAt       DateTime @default(now())
  PK_emotionData Int      @id @unique @default(autoincrement())
  userId         String   @map("loginId")
  user           user     @relation(fields: [userId], references: [loginId])

  @@index([userId], map: "emotionData_userId_fkey")
}

model DiaryAnswer {
  id             Int           @id @unique @default(autoincrement()) @map("PK_diaryAnswer")
  questionNumber Int           @map("FK_questionNumber")
  userId         String        @map("loginId")
  content        String        @db.VarChar(600)
  createAt       DateTime      @default(now())
  updateAt       DateTime      @updatedAt
  diaryQuestion  DiaryQuestion @relation(fields: [questionNumber], references: [id])
  user           user          @relation(fields: [userId], references: [loginId])

  @@index([questionNumber], map: "diaryAnswer_FK_questionNumber_fkey")
  @@index([userId], map: "diaryAnswer_loginId_fkey")
}

model DiaryQuestion {
  id          Int           @id @unique @default(autoincrement()) @map("PK_diaryQuestion")
  question    String        @db.VarChar(80)
  diaryAnswer DiaryAnswer[]
}
