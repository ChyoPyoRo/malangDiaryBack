generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int            @id @unique @default(autoincrement())
  email        String         @db.VarChar(40)
  name         String         @unique @db.VarChar(20)
  password     String         @db.VarChar(60)
  description  String?        @db.VarChar(100)
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  withdrawal   Int            @default(0) @db.TinyInt
  emotion      String?        @db.VarChar(20)
  diary        Diary[]
  diaryAnswer  DiaryAnswer[]
  emotionData  EmotionData[]
  following    Friend[]       @relation("follower")
  followers    Friend[]       @relation("following")
  message      message[]
  refreshToken refreshToken[]
}

model emailAuthentication {
  id          Int    @id @unique @default(autoincrement())
  email       String @db.VarChar(40)
  CertiNumber Int
}

model Diary {
  PK_diary     Int           @id @unique @default(autoincrement())
  emotion      String
  img          String?       @db.VarChar(200)
  content      String        @db.VarChar(1000)
  scope        String        @db.VarChar(10)
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  title        String        @db.VarChar(40)
  subTitle     String?       @db.VarChar(40)
  userName     String
  userId       Int           @map("FK_userId")
  user         user          @relation(fields: [userId], references: [id])
  diaryEmotion diaryEmotion?

  @@index([userId], map: "diary_userId_fkey")
}

model diaryEmotion {
  Excited    Float
  Comfort    Float
  Confidence Float
  thanks     Float
  Sadness    Float
  Anger      Float
  Anxiety    Float
  hurt       Float
  diaryId    Int   @unique @map("FK_diaryId")
  diary      Diary @relation(fields: [diaryId], references: [PK_diary])
}

model message {
  id       String   @id @unique @default(uuid())
  userId   Int
  text     String   @db.VarChar(200)
  createAt DateTime @default(now())
  room     String
  chatRoom chatRoom @relation(fields: [room], references: [id])
  user     user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "message_userId_fkey")
  @@index([room], map: "message_room_fkey")
}

model chatRoom {
  id        String    @id @unique @default(uuid())
  userIdFst String
  userIdSnd String
  latest    DateTime
  message   message[]
}

model standByFriend {
  requester        String
  respondent       String   @db.VarChar(40)
  relationship     Int      @default(0) @db.TinyInt
  createAt         DateTime @default(now())
  PK_standByFriend Int      @id @unique @default(autoincrement())
}

model Friend {
  followerId  Int
  followingId Int
  follower    user @relation("follower", fields: [followerId], references: [id])
  following   user @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId], map: "Friend_followingId_fkey")
}

model refreshToken {
  id           String @id @unique @default(uuid())
  refreshToken String @db.VarChar(500)
  userId       Int
  user         user   @relation(fields: [userId], references: [id])

  @@index([userId], map: "refreshToken_userId_fkey")
}

model EmotionData {
  emotion        String   @db.VarChar(20)
  createAt       DateTime @default(now())
  PK_emotionData Int      @id @unique @default(autoincrement())
  userId         Int      @map("FK_userId")
  user           user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "emotionData_userId_fkey")
}

model DiaryAnswer {
  PK_diaryAnswer Int           @id @unique @default(autoincrement())
  questionNumber Int           @map("FK_questionNumber")
  userId         Int           @map("FK_userId")
  diaryQuestion  DiaryQuestion @relation(fields: [questionNumber], references: [PK_diaryQuestion])
  user           user          @relation(fields: [userId], references: [id])

  @@index([questionNumber], map: "diaryAnswer_FK_questionNumber_fkey")
  @@index([userId], map: "diaryAnswer_FK_userId_fkey")
}

model DiaryQuestion {
  PK_diaryQuestion Int           @id @unique @default(autoincrement())
  question         String        @db.VarChar(80)
  diaryAnswer      DiaryAnswer[]
}
